version: '3.8'

services:
  patient-service-db:
    image: postgres:15
    container_name: patient-service-db
    environment:
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - microservices-network

  auth-service-db:
    image: postgres:latest
    container_name: auth-service-db
    environment:
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: authdb
    ports:
      - "5001:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - microservices-network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    image: auth-service:latest
    container_name: auth-service
    depends_on:
      - auth-service-db
    ports:
      - "4005:4005"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-service-db:5432/authdb
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_SQL_INIT_MODE: always
      SPRING_PROFILES_ACTIVE: docker
      JAVA_TOOL_OPTIONS: "-Xmx512m -Xms256m -Dlogging.level.root=INFO"
    networks:
      - microservices-network
    restart: on-failure

  patient-service:
    build:
      context: ./patient-service
      dockerfile: Dockerfile
    image: patient-service:latest
    container_name: patient-service
    depends_on:
      - patient-service-db
      - billing-service
    ports:
      - "9090:9090" # gRPC port
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://patient-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: password
      BILLING_SERVICE_ADDRESS: billing-service
      BILLING_SERVICE_GRPC_PORT: 9001
      SPRING_PROFILES_ACTIVE: docker
    restart: on-failure
    networks:
      - microservices-network

  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile
    image: billing-service:latest
    container_name: billing-service
    ports:
      - "4001:4001" # REST API port
      - "9001:9001" # gRPC port
    environment:
      SERVER_PORT: 4001
      GRPC_SERVER_PORT: 9001
      SPRING_PROFILES_ACTIVE: docker
    restart: on-failure
    networks:
      - microservices-network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
    networks:
      - microservices-network
    restart: always

  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    image: analytics-service:latest
    container_name: analytics-service
    depends_on:
      - kafka
    ports:
      - "4002:4002"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - microservices-network
    restart: on-failure

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    image: api-gateway:latest
    container_name: api-gateway
    ports:
      - "4004:4004"
    networks:
      - microservices-network
    restart: on-failure

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"   # Edge port for all services
      - "4571:4571"   # Optional: old S3 port, if needed
    environment:
      - SERVICES=s3,sqs,sns,lambda,dynamodb # Add/remove AWS services as needed
      - DEFAULT_REGION=us-east-1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./localstack-data:/tmp/localstack/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - microservices-network
    restart: on-failure

volumes:
  postgres_data:
    name: patient-service-postgres-data
  auth_postgres_data:
    name: auth-service-postgres-data

networks:
  microservices-network:
    driver: bridge